/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 public/models/dk.glb 
*/

import React, { useEffect, useRef } from 'react'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { useControls } from 'leva';
import { useFrame } from '@react-three/fiber';
import * as THREE from "three";


export function Avatar(props) {
    const {animation} = props
  const {headFollow, cursorFollow} = useControls({
    headFollow:false,
    cursorFollow:false,
  }
  );
  const group = useRef();
  const { nodes, materials } = useGLTF('models/dk.glb')

  const {animations: waveAnimation} = useFBX('animations/waving.fbx')
  const {animations: idleAnimation} = useFBX('animations/idle.fbx')
  const {animations: stretchAnimation} = useFBX('animations/stretching.fbx')
  const {animations: backflipAnimation} = useFBX('animations/Backflip.fbx')
  const {animations: sitAnimation} = useFBX('animations/sit.fbx')
  const {animations: s2sAnimation} = useFBX('animations/s2s.fbx')

  //Rename the animation
  waveAnimation[0].name = "Waving"
  idleAnimation[0].name = "Idle"
  stretchAnimation[0].name = "Stretch"
  backflipAnimation[0].name = "Backflip"
  sitAnimation[0].name = "Sit"
  s2sAnimation[0].name = "S2S"


  const {actions} = useAnimations([waveAnimation[0],idleAnimation[0],stretchAnimation[0],backflipAnimation[0], sitAnimation[0], s2sAnimation[0]], group)

  useFrame((state)=>{
    if(headFollow){
        group.current.getObjectByName("Head").lookAt(state.camera.position);
    }
    if (cursorFollow){
        const target = new THREE.Vector3(state.mouse.x,state.mouse.y,1);
        group.current.getObjectByName("Spine2").lookAt(target);

    }
  })

  useEffect(()=>{
    actions[animation].reset().fadeIn(0.5).play();
    return()=>{
        actions[animation].reset().fadeOut(0.5);
    }
  },[animation]);


  return (
    <group {...props} ref={group} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
  )
}

useGLTF.preload('models/dk.glb')
